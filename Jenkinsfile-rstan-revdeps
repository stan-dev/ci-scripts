#!/usr/bin/env groovy

@Library('StanUtils')
import org.stan.Utils

utils = new org.stan.Utils()

pipeline {
    agent none
    options {
        parallelsAlwaysFailFast()
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '90'))
        disableConcurrentBuilds(abortPrevious: true)
    }
    parameters {
        string(defaultValue: 'develop', name: 'rstan_branch',
               description: 'RStan branch to test against.')
        string(defaultValue: 'develop', name: 'stan_pr',
               description: 'Stan PR to test against. Will check out this PR in the downstream Stan repo.')
        string(defaultValue: 'develop', name: 'math_pr',
               description: 'Math PR to test against. Will check out this PR in the downstream Math repo.')
        string(defaultValue: 'nightly', name: 'stanc3_version',
               description: 'Stanc3 version to test against. Will download this release into StanHeaders.')
    }

    stages {
        stage('RStan revdeps') {
            agent {
                dockerfile {
                    filename 'docker/rstan-revdeps/Dockerfile'
                    label 'linux'
                }
            }
            environment {
                TIMEOUT = 40
                PARALLEL = 4
                HOME = "$WORKSPACE"
                R_LIBS_USER="$WORKSPACE/R/library"
                MAKEFLAGS = "-j2"
                R_REVDEPCHECK_NUM_WORKERS="${env.PARALLEL}"
                R_REVDEPCHECK_TIMEOUT="${env.TIMEOUT}"
            }
            steps {
                script {
                    sh "mkdir -p ${env.R_LIBS_USER} && echo 'R_LIBS_USER=\"${env.R_LIBS_USER}\"' > $HOME/.Renviron"

                    sh "git clone --recursive https://github.com/stan-dev/rstan --branch ${params.rstan_branch}"
                    // sh "cd rstan && git submodule update --init --recursive --remote"
                    sh "cd rstan/StanHeaders/inst/include/upstream && ls && git branch --remotes"
                    utils.checkout_pr('stan', 'rstan/StanHeaders/inst/include/upstream', params.stan_pr)
                    utils.checkout_pr("math", "rstan/StanHeaders/inst/include/upstream/lib/stan_math", params.math_pr)

                    sh "cd rstan/StanHeaders/inst/ && rm -rf stanc.js && wget https://github.com/stan-dev/stanc3/releases/download/${params.stanc3_version}/stanc.js"
                    // copied from rstan/sh_b.sh
                    sh """
                    cd rstan
                    rm -Rf StanHeaders/inst/include/src \
                        StanHeaders/inst/include/mathlib \
                        StanHeaders/inst/include/stan \
                        StanHeaders/inst/include/libsundials || true

                    cp -Rf StanHeaders/inst/include/upstream/src StanHeaders/inst/include/src || true
                    cp -Rf StanHeaders/inst/include/upstream/lib/stan_math StanHeaders/inst/include/mathlib || true
                    cp -Rf StanHeaders/inst/include/upstream/lib/stan_math/stan StanHeaders/inst/include/stan || true
                    cp -Rf StanHeaders/inst/include/upstream/lib/stan_math/lib/sundials_* StanHeaders/inst/include/libsundials || true
                    cp -Rf StanHeaders/inst/include/upstream/lib/stan_math/lib/sundials_*/include/* StanHeaders/inst/include/ || true
                    cp -Rf StanHeaders/inst/include/upstream/lib/stan_math/lib/sundials_*/src/* StanHeaders/src/ || true
                    R CMD build "\$@" StanHeaders/ --no-manual --no-build-vignettes
                    """

                    sh '''Rscript -e "crancache::install_packages(c('rstan', 'rstantools'), repos='https://cloud.r-project.org', dependencies=TRUE)"'''
                    sh '''cd rstan/StanHeaders&& Rscript -e "remove.packages('rstan'); remove.packages('StanHeaders'); install.packages(getwd(), repos=NULL, type='source')"'''
                    sh '''cd rstan/rstan/rstan && Rscript -e "install.packages(getwd(), repos=NULL, type='source')"'''

                    // sh "cd rstan/StanHeaders && Rscript -e 'options(Ncpus=${env.PARALLEL}); revdepcheck.extras::revdep_precache()'"

                    sh '''
                    cd rstan/StanHeaders
                    Rscript -e "revdepcheck.extras::check(bioc=TRUE)"
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'rstan/StanHeaders*.tar.gz'
                    script {
                        try {
                            sh 'cd rstan/StanHeaders && Rscript -e "revdepcheck::revdep_report()"'
                        } catch (err) {
                            echo 'Failed to generate revdep report'
                        }
                    }
                    archiveArtifacts 'rstan/StanHeaders/revdep/*.md'
                    archiveArtifacts 'rstan/StanHeaders/revdep/checks/**/*.log'
                    archiveArtifacts 'rstan/StanHeaders/revdep/checks/**/*.out'
                    retry(3) { deleteDir() }
                }
            }
        }
    }
    post {
        always {
            node('linux') {
                recordIssues enabledForFailure: false, tool: clang()
            }
        }
        success { script { utils.mailBuildResults('SUCCESSFUL') } }
        unstable { script { utils.mailBuildResults('UNSTABLE') } }
        failure { script { utils.mailBuildResults('FAILURE') } }
    }
}
