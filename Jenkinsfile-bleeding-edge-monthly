#!/usr/bin/env groovy

@Library('StanUtils')
import org.stan.Utils

utils = new org.stan.Utils()

String stanc3_bin_url() { params.stanc3_bin_url != "nightly" ? "\nSTANC3_TEST_BIN_URL=${params.stanc3_bin_url}\n" : "" }

def runTests(String testPath, boolean jumbo = false) {
    try {
        if (jumbo && !params.disableJumbo) {
            sh "python3 runTests.py -j${env.PARALLEL} ${testPath} --jumbo --debug"
        } else {
            sh "python3 runTests.py -j${env.PARALLEL} ${testPath}"
        }
    }
    finally { junit 'test/**/*.xml' }
}

def setupMakeLocal(String o = "", String cc = "" , String cxx = "" , String cFlags = "", String cppFlags = "", String cxxFlags = "", String ldFlags = "", String makeLocalPath = "make/local") {
    // When ready, change O=3
    sh """
        echo O="0 ${o}" >> ${makeLocalPath}
        echo CC="clang ${cc}" >> ${makeLocalPath}
        echo CXX="clang++ ${cxx}" >> ${makeLocalPath}
        echo CFLAGS+="-stdlib=libc++ ${cFlags}" >> ${makeLocalPath}
        echo CPPFLAGS+="-nostdinc++ -nodefaultlibs -I/usr/local/include/c++/v1 ${cppFlags}" >> ${makeLocalPath}
        echo CXXFLAGS+="-nostdinc++ -nostdlib++ -I/usr/local/include/c++/v1 ${cxxFlags}" >> ${makeLocalPath}
        echo LDFLAGS+="-L/usr/local/lib -Wl,-R/usr/local/lib -I/usr/local/include/c++/v1  -L/usr/local/lib -Wl,-rpath,/usr/local/lib -lc++ -lc++abi -lm -lc -lgcc_s -lgcc ${ldFlags}" >> ${makeLocalPath}
    """
}

def runPerformanceTests(String testsPath, String stancFlags = ""){
    unstash 'ubuntu-exe'

    sh """
        git clone --recursive --depth 50 https://github.com/stan-dev/performance-tests-cmdstan
    """

    utils.checkout_pr("cmdstan", "performance-tests-cmdstan/cmdstan", params.cmdstan_pr)
    utils.checkout_pr("stan", "performance-tests-cmdstan/cmdstan/stan", params.stan_pr)
    utils.checkout_pr("math", "performance-tests-cmdstan/cmdstan/stan/lib/stan_math", params.math_pr)

    setupMakeLocal("","","","","","", "-ltbb", "performance-tests-cmdstan/cmdstan/make/local")

    sh """
        cd performance-tests-cmdstan
        mkdir cmdstan/bin
        cp ../bin/stanc cmdstan/bin/linux-stanc
        cd cmdstan; make clean-all;
    """

    if (stancFlags?.trim()) {
        sh "cd performance-tests-cmdstan/cmdstan && echo 'STANCFLAGS= $stancFlags' >> make/local"
    }

    sh """
        cd performance-tests-cmdstan/cmdstan
        echo 'O=0' >> make/local
        make -j${env.PARALLEL} build; cd ..
        python3 runPerformanceTests.py -j${env.PARALLEL} --runs=2 ${testsPath}
    """
}

pipeline {
    agent none
    options {
        skipDefaultCheckout()
        preserveStashes(buildCount: 7)
        parallelsAlwaysFailFast()
    }
    parameters {
        booleanParam(defaultValue: false, name: 'buildDocker', description: 'Build docker image with latest gcc, clang')
        string(defaultValue: 'nightly', name: 'stanc3_bin_url', description: 'Custom stanc3 binary url')
        string(defaultValue: 'develop', name: 'cmdstan_pr',
               description: "CmdStan PR to test against. Will check out this PR in the downstream Stan repo.")
        string(defaultValue: 'develop', name: 'stan_pr',
               description: "Stan PR to test against. Will check out this PR in the downstream Stan repo.")
        string(defaultValue: 'develop', name: 'math_pr',
               description: "Math PR to test against. Will check out this PR in the downstream Math repo.")
        string(defaultValue: 'master', name: 'stanc3_pr',
               description: "Stanc3 PR to test against. Will check out this PR in the downstream Math repo.")
    }
    environment {
        STAN_NUM_THREADS = 4
        N_TESTS = 100
        PARALLEL = 1 // Change to 4 when ready
        GCC = 'g++'
    }
    stages {
        stage('Build and push docker image') {
            when {
                beforeAgent true
                expression {
                    params.buildDocker
                }
            }
            agent {
                docker {
                    image 'stanorg/stanc3:staticfi'
                    label 'linux'
                    args "--pull always --group-add=987 --group-add=988 --entrypoint=\'\' -v /var/run/docker.sock:/var/run/docker.sock"
                }
            }
            environment { DOCKER_TOKEN = credentials('aada4f7b-baa9-49cf-ac97-5490620fce8a') }
            steps {
                script {
                    retry(3) { checkout scm }
                    sh """
                        cd docker/bleeding-edge-compilers
                        docker build -t stanorg/ci:bleeding-edge-compilers --build-arg PUID=990 --build-arg PGID=986 .
                        docker login --username stanorg --password "${DOCKER_TOKEN}"
                        docker push stanorg/ci:bleeding-edge-compilers
                    """
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }

        stage('Prepare math') {
            agent {
                docker {
                    image 'alpine/git'
                    label 'linux'
                    args "--entrypoint=\'\'"
                }
            }
            steps {
                script {
                    sh """
                        rm -rf math
                        git clone https://github.com/stan-dev/math.git
                        cd math
                        git checkout ${params.math_pr}
                        git clean -xffd
                    """
                    stash 'MathSetup'
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }

        stage('Prepare Performance-Tests-Cmdstan') {
            agent {
                docker {
                    image 'alpine/git'
                    label 'linux'
                    args "--entrypoint=\'\'"
                }
            }
            steps {
                deleteDir()
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [[$class: 'SubmoduleOption',
                                        disableSubmodules: false,
                                        parentCredentials: false,
                                        recursiveSubmodules: true,
                                        reference: '',
                                        trackingSubmodules: false]],
                          submoduleCfg: [],
                          userRemoteConfigs: [[url: "https://github.com/stan-dev/performance-tests-cmdstan.git",
                                               credentialsId: 'a630aebc-6861-4e69-b497-fd7f496ec46b'
                    ]]])

                stash 'PerfSetup'
            }
            post {
                always {
                    deleteDir()
                }
            }
        }

        stage('Prepare stanc3') {
            agent {
                docker {
                    image 'alpine/git'
                    label 'linux'
                    args "--entrypoint=\'\'"
                }
            }
            steps {
                script {
                    sh """
                        rm -rf stanc3
                        git clone https://github.com/stan-dev/stanc3.git
                        cd stanc3
                        git submodule update --init --recursive
                        git checkout ${params.stanc3_pr}
                        git clean -xffd
                    """

                    stash 'Stanc3Setup'
                }
            }
            post {
                always {
                    deleteDir()
                }
            }
        }
    
        stage("Build Stanc3") {
            agent {
                docker {
                    image 'stanorg/stanc3:debianfi'
                    //Forces image to ignore entrypoint
                    args "--entrypoint=\'\'"
                    label 'linux'
                }
            }
            steps {
                unstash "Stanc3Setup"
                sh"""
                    eval \$(opam env)
                    dune build @install
                """

                sh "mkdir -p bin && mv _build/default/stanc3/src/stanc/stanc.exe bin/stanc"
                stash name:'ubuntu-exe', includes:'bin/stanc, notes/working-models.txt'
            }
            post { always { sh "rm -rf ./*" }}
        }

        // stage('Full Unit Tests') {
        //     failFast true
        //     parallel {
        //         stage('Rev/Fwd Unit Tests') {
        //             agent {
        //                 docker {
        //                     image 'stanorg/ci:bleeding-edge-compilers'
        //                     label 'linux'
        //                     args '--pull always --cap-add SYS_PTRACE'
        //                 }
        //             }
        //             steps {
        //                 unstash 'MathSetup'
        //                 dir('math') {
        //                     script {
        //                         setupMakeLocal()
        //                         runTests("test/unit/math/rev")
        //                         runTests("test/unit/math/fwd")
        //                     }
        //                 }

        //             }
        //             post { always { retry(3) { deleteDir() } } }
        //         }
        //         stage('Mix Unit Tests') {
        //             agent {
        //                 docker {
        //                     image 'stanorg/ci:bleeding-edge-compilers'
        //                     label 'linux'
        //                     args '--pull always --cap-add SYS_PTRACE'
        //                 }
        //             }
        //             steps {
        //                 unstash 'MathSetup'
        //                 dir('math') {
        //                     script {
        //                         setupMakeLocal()
        //                         runTests("test/unit/math/mix", true)
        //                     }
        //                 }

        //             }
        //             post { always { retry(3) { deleteDir() } } }
        //         }
        //         stage('Prim Unit Tests') {
        //             agent {
        //                 docker {
        //                     image 'stanorg/ci:bleeding-edge-compilers'
        //                     label 'linux'
        //                     args '--pull always --cap-add SYS_PTRACE'
        //                 }
        //             }
        //             steps {
        //                 unstash 'MathSetup'
        //                 dir('math') {
        //                     script {
        //                         setupMakeLocal()
        //                         runTests("test/unit/*_test.cpp", false)
        //                         runTests("test/unit/math/*_test.cpp", false)
        //                         runTests("test/unit/math/prim", true)
        //                         runTests("test/unit/math/memory", false)
        //                     }
        //                 }

        //             }
        //             post { always { retry(3) { deleteDir() } } }
        //         }
        //     }
        // }

        stage("CmdStan & Math tests") {
            parallel {
                stage("Compile tests - good at O=1") {
                    agent {
                        docker {
                            image 'stanorg/ci:bleeding-edge-compilers'
                            label 'linux'
                            args '--pull always'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/compile-good-O1"){
                            unstash "Stanc3Setup"
                            script {
                                runPerformanceTests("../test/integration/good", "--O1")
                            }

                            xunit([GoogleTest(
                                deleteOutputFiles: false,
                                failIfNotNew: true,
                                pattern: 'performance-tests-cmdstan/performance.xml',
                                skipNoTestFiles: false,
                                stopProcessingIfError: false)
                            ])
                        }
                    }
                    post { always { sh "rm -rf ${env.WORKSPACE}/compile-good-O1/*" }}
                }

                stage("Compile tests - example-models at O=1") {
                    agent {
                        docker {
                            image 'stanorg/ci:bleeding-edge-compilers'
                            label 'linux'
                            args '--pull always'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/compile-example-O1"){
                            script {
                                unstash "Stanc3Setup"
                                runPerformanceTests("example-models", "--O1")
                            }

                            xunit([GoogleTest(
                                deleteOutputFiles: false,
                                failIfNotNew: true,
                                pattern: 'performance-tests-cmdstan/performance.xml',
                                skipNoTestFiles: false,
                                stopProcessingIfError: false)
                            ])
                        }
                    }
                    post { always { sh "rm -rf ${env.WORKSPACE}/compile-example-O1/*" }}
                }

                stage("Model end-to-end tests at O=1") {
                    agent {
                        docker {
                            image 'stanorg/ci:bleeding-edge-compilers'
                            label 'linux'
                            args '--pull always'
                        }
                    }
                    steps {
                        dir("${env.WORKSPACE}/compile-end-to-end-O=1"){
                            script {
                                unstash "Stanc3Setup"
                                unstash 'ubuntu-exe'
                                sh "ls -lhart"
                                sh """
                                    git clone --recursive --depth 50 https://github.com/stan-dev/performance-tests-cmdstan
                                """
                                utils.checkout_pr("cmdstan", "performance-tests-cmdstan/cmdstan", params.cmdstan_pr)
                                utils.checkout_pr("stan", "performance-tests-cmdstan/cmdstan/stan", params.stan_pr)
                                utils.checkout_pr("math", "performance-tests-cmdstan/cmdstan/stan/lib/stan_math", params.math_pr)
                                setupMakeLocal("","","","","","-march=core2", "", "performance-tests-cmdstan/cmdstan/make/local")
                                sh """
                                    cd performance-tests-cmdstan
                                    git show HEAD --stat
                                    echo "example-models/regression_tests/mother.stan" > all.tests
                                    cat known_good_perf_all.tests >> all.tests
                                    echo "" >> all.tests
                                    cat shotgun_perf_all.tests >> all.tests
                                    cat all.tests
                                    echo "PRECOMPILED_HEADERS=false" >> cmdstan/make/local
                                    pwd
                                    cd cmdstan; make clean-all; git show HEAD --stat; make -j4 build
                                    pwd
                                    rm bin/stanc
                                    cp ../../bin/stanc bin/stanc
                                    make print-compiler-flags
                                    make -j4 examples/bernoulli/bernoulli; ./bin/stanc --version; cd ..
                                    echo "STANCFLAGS += --O1" >> cmdstan/make/local
                                    pip3 install -U Pillow
                                    python3 runPerformanceTests.py --overwrite-golds --tests-file all.tests --num-samples=10
                                """
                            }

                            xunit([GoogleTest(
                                deleteOutputFiles: false,
                                failIfNotNew: true,
                                pattern: 'performance-tests-cmdstan/performance.xml',
                                skipNoTestFiles: false,
                                stopProcessingIfError: false)
                            ])

                            archiveArtifacts 'performance-tests-cmdstan/performance.xml'
                        }
                    }
                    post { always { sh "rm -rf ${env.WORKSPACE}/compile-end-to-end-O=1/*" }}
                }
            }
        }

        stage('CmdStan Perf Tests') {
            parallel {
                stage("Numerical Accuracy and Performance Tests on Known-Good Models") {
                    // This will error out on MAC M1 architecture
                    agent { label 'osx && intel' }
                    steps {
                        unstash "PerfSetup"
                        setupMakeLocal("","","","","","-march=core2 \n${stanc3_bin_url()}", "", "cmdstan/make/local")
                        sh "python3 runPerformanceTests.py --runs 3 --check-golds --name=known_good_perf --tests-file=known_good_perf_all.tests"
                        junit '*.xml'
                        archiveArtifacts '*.xml'
                }
            }
            stage('Shotgun Performance Regression Tests') {
                agent {
                    docker {
                        image 'stanorg/ci:bleeding-edge-compilers'
                        label 'linux'
                        args '--pull always'
                    }
                }
                steps {
                    unstash "PerfSetup"
                    setupMakeLocal("","","","","","-march=core2 \n${stanc3_bin_url()}", "", "cmdstan/make/local")
                    sh "python3 runPerformanceTests.py --runs 2 --name=shotgun_perf --tests-file=shotgun_perf_all.tests "
                }
            }
            }
        }

    }

    post {
        always {
            node("linux") {
                recordIssues enabledForFailure: false, tool: clang()
            }
        }
        // success { script { utils.mailBuildResults("SUCCESSFUL") } }
        // unstable { script { utils.mailBuildResults("UNSTABLE") } }
        // failure { script { utils.mailBuildResults("FAILURE") } }
    }
}
